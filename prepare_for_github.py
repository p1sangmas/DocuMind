#!/usr/bin/env python3
"""
Prepare DocuMind for GitHub push.
This script creates the necessary directories and files 
while ensuring sensitive information is not included.
"""
import os
import sys
import shutil
from pathlib import Path

def create_directory(dir_path):
    """Create a directory if it doesn't exist"""
    os.makedirs(dir_path, exist_ok=True)
    print(f"‚úÖ Ensured directory exists: {dir_path}")

def create_empty_file(file_path, content="# This file is automatically generated"):
    """Create an empty placeholder file"""
    with open(file_path, 'w') as f:
        f.write(content)
    print(f"‚úÖ Created placeholder: {file_path}")

def copy_file(src, dst):
    """Copy a file if it exists"""
    if os.path.exists(src):
        shutil.copy2(src, dst)
        print(f"‚úÖ Copied: {src} -> {dst}")
    else:
        print(f"‚ö†Ô∏è Warning: Source file not found: {src}")

def prepare_for_github():
    """Prepare the repository for GitHub push"""
    print("üß† Preparing DocuMind for GitHub...")
    
    # Ensure necessary directories exist
    create_directory('data')
    create_directory('data/documents')
    create_directory('data/vectorstore')
    
    # Create placeholder files for empty directories
    create_empty_file('data/documents/.gitkeep')
    create_empty_file('data/vectorstore/.gitkeep')
    
    # Ensure settings.example.py exists
    if not os.path.exists('config/settings.example.py'):
        if os.path.exists('config/settings.py'):
            copy_file('config/settings.py', 'config/settings.example.py')
        else:
            print("‚ö†Ô∏è Warning: Cannot create settings.example.py, settings.py not found")
    
    # Create .gitkeep files for empty directories
    for directory in ['tests']:
        if os.path.isdir(directory) and not os.listdir(directory):
            create_empty_file(f'{directory}/.gitkeep')
    
    # Check if .gitignore exists
    if not os.path.exists('.gitignore'):
        print("‚ö†Ô∏è Warning: .gitignore file not found. Create one to exclude sensitive data.")
    
    # Check for potential sensitive files
    sensitive_patterns = [
        'data/documind.log',
        'data/feedback.db',
        'data/vectorstore/*.sqlite3',
        'data/documents/*.pdf',
        'config/__pycache__',
        'src/__pycache__',
        '__pycache__'
    ]
    
    print("\nüîç Checking for sensitive files that should be excluded:")
    for pattern in sensitive_patterns:
        matching_files = list(Path('.').glob(pattern))
        if matching_files:
            print(f"‚ö†Ô∏è Found sensitive files matching '{pattern}': {len(matching_files)} file(s)")
            if len(matching_files) <= 5:  # Show only a few examples
                for file in matching_files:
                    print(f"   - {file}")
    
    print("\n‚úÖ Preparation complete!")
    print("\nNext steps:")
    print("1. Review the .gitignore file to ensure sensitive files are excluded")
    print("2. Initialize git repository: git init")
    print("3. Add files: git add .")
    print("4. Commit: git commit -m 'Initial commit'")
    print("5. Add remote: git remote add origin <your-github-repo-url>")
    print("6. Push: git push -u origin main")

if __name__ == "__main__":
    prepare_for_github()
